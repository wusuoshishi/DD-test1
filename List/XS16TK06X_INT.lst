C51 COMPILER V9.60.0.0   XS16TK06X_INT                                                     05/09/2023 16:49:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE XS16TK06X_INT
OBJECT MODULE PLACED IN .\Output\XS16TK06X_INT.obj
COMPILER INVOKED BY: D:\Program_Files\KEIL5_521A\C51\BIN\C51.EXE Source\XS16TK06X_INT.c OMF2 OPTIMIZE(8,SPEED) BROWSE IN
                    -CDIR(.\Inc;.\User;.\Application_Library;.\Project) DEBUG PRINT(.\List\XS16TK06X_INT.lst) OBJECT(.\Output\XS16TK06X_INT.o
                    -bj)

line level    source

   1          #include "Config.h"
   2          
   3          //----------------------------------------------------------------//
   4          //函数名称： void ExtInt0_Init(uchar TriggerMode)
   5          //函数功能： 外部中断0初始化
   6          //输入参数：
   7          //外部中断0触发方式选择，uchar TriggerMode
   8          //                       TriggerMode = 0，触发方式为双边沿触发
   9          //                       TriggerMode = 1，触发方式为下降沿触发
  10          //                       TriggerMode = 2，触发方式为上升沿触发
  11          //输出参数： 无
  12          //返 回 值： 无
  13          //-----------------------------------------------------------------// 
  14          #if ExtInt0_EN
              #pragma message "编译，void ExtInt0_Init(uchar TriggerMode)函数"
              void ExtInt0_Init(uchar TriggerMode)
              {
              
                      EA = 0;//关总中断；
              
                      INT0_FUN_SET(1)//0选择为IO口功能，1选择为INT中断功能
                      INT0_IP_SET;//设置IN0中断优级为高
                      INT0_INT_FLAG_CLR;//清除INT0中断标志，根据实际应运设置优先级
                      
                      switch(TriggerMode)
                      {
                              case 0: 
                                                                              
                                      EXT_INT_CON |= 0X01;    //设置为下降沿触发 
                                      
                              break;
              
                              case 1:                                         
                                      EXT_INT_CON &= ~0X01;   
                                      EXT_INT_CON |= 0X02;    //设置为上升沿触发
                              break;
                                                                       
                              case 2:                                         
                                      EXT_INT_CON |= 0X03;    //设置为双边沿触发
                              
                              break;
                                                                      
              
                              default:
                                      EXT_INT_CON |= 0X01;    //设置为下降沿触发
                              break;  
                      }
                      INT0_IE_SET;//使能外部INT0中断 
                      EA = 1;//开总中断       
              }
              //-----------------------------------------------------------------//
              //函数名称： void Ext0_ISR() interrupt 0
              //函数功能： 外部中断0中断子函数
C51 COMPILER V9.60.0.0   XS16TK06X_INT                                                     05/09/2023 16:49:06 PAGE 2   

              //输入参数： 无
              //输出参数： 无
              //返 回 值： 无
              //-----------------------------------------------------------------// 
              void Ext0_ISR() interrupt 0 
              {
                      
                      INT0_INT_FLAG_CLR;//清除INT0中断标志
              
              
              } 
              #endif
  66          
  67          //-----------------------------------------------------------------//
  68          //函数名称： void ExtInt1_Init(uchar TriggerMode)
  69          //函数功能： 外部中断1初始化
  70          //输入参数： 
  71          //外部中断1触发方式选择，uchar TriggerMode
  72          //                       TriggerMode = 0，触发方式为双边沿触发
  73          //                       TriggerMode = 1，触发方式为下降沿触发
  74          //                       TriggerMode = 2，触发方式为上升沿触发 
  75          //输出参数： 无
  76          //返 回 值： 无
  77          //-----------------------------------------------------------------// 
  78          #if ExtInt1_EN
              #pragma message "编译，void ExtInt1_Init(uchar TriggerMode)函数"
              void ExtInt1_Init(uchar TriggerMode)
              {
                      EA = 0;//关总中断；
                      INT1_FUN_SET(1)//0选择为IO口功能，1选择为INT中断功能
                      INT1_INT_FLAG_CLR;//清除INT1中断标志
                      INT1_IP_SET;//设置INT1中断优级为高，根据实际应运设置优先级
                      switch(TriggerMode)
                      {
                              case 0: 
                                                                              
                                      EXT_INT_CON |= 0X04;    //设置为下降沿触发 
                                      
                              break;
              
                              case 1:                                         
                                      EXT_INT_CON &= ~0X04;   
                                      EXT_INT_CON |= 0X08;    //设置为上升沿触发
                              break;
                                                                       
                              case 2:                                         
                                      EXT_INT_CON |= 0X0C;    //设置为双边沿触发
                              
                              break;
                                                                      
              
                              default:
                                      EXT_INT_CON |= 0X04;    //设置为下降沿触发
                              break;  
                      }
                      INT1_IE_SET;//使能外部INT1中断 
                      EA = 1;//开总中断       
              }
              //-----------------------------------------------------------------//
              //函数名称： void Ext1_ISR() interrupt 2
              //函数功能： 外部中断1中断子函数
              //输入参数： 无
C51 COMPILER V9.60.0.0   XS16TK06X_INT                                                     05/09/2023 16:49:06 PAGE 3   

              //输出参数： 无
              //返 回 值： 无
              //-----------------------------------------------------------------// 
              void Ext1_ISR() interrupt 2 
              {
                      
                      INT1_INT_FLAG_CLR;//清除INT1中断标志
                      
                      
              }
              #endif
 127          
 128          
 129          //-----------------------------------------------------------------//
 130          //函数名称： void ExtInt2_Init(uchar TriggerMode)
 131          //函数功能： 外部中断2初始化
 132          //输入参数： 
 133          //外部中断1触发方式选择，uchar TriggerMode
 134          //                       TriggerMode = 0，触发方式为双边沿触发
 135          //                       TriggerMode = 1，触发方式为下降沿触发
 136          //                       TriggerMode = 2，触发方式为上升沿触发
 137          //输出参数： 无
 138          //返 回 值： 无
 139          //-----------------------------------------------------------------// 
 140          #if ExtInt2_EN
              #pragma message "编译，void ExtInt2_Init(uchar TriggerMode)函数"
              void ExtInt2_Init(uchar TriggerMode)
              {
                      EA = 0;//关总中断；
                      INT2_FUN_SET(1)//0选择为IO口功能，1选择为INT中断功能
                      INT2_INT_FLAG_CLR;//清除INT2中断标志
                      INT2_IP_SET;//设置INT2中断优级为高，根据实际应运设置优先级
                      switch(TriggerMode)
                      {
                              case 0: 
                                                                              
                                      EXT_INT_CON |= 0X10;    //设置为下降沿触发 
                                      
                              break;
              
                              case 1:                                         
                                      EXT_INT_CON &= ~0X10;   
                                      EXT_INT_CON |= 0X20;    //设置为上升沿触发
                              break;
                                                                       
                              case 2:                                         
                                      EXT_INT_CON |= 0X30;    //设置为双边沿触发
                              
                              break;
                                                                      
              
                              default:
                                      EXT_INT_CON |= 0X10;    //设置为下降沿触发
                              break;  
                      }
                      INT2_IE_SET;//使能外部INT2中断 
                      EA = 1;//开总中断       
              }
              //-----------------------------------------------------------------//
              //函数名称： void Ext2_ISR() interrupt 9
              //函数功能： 外部中断2中断子函数
              //输入参数： 无
C51 COMPILER V9.60.0.0   XS16TK06X_INT                                                     05/09/2023 16:49:06 PAGE 4   

              //输出参数： 无
              //返 回 值： 无
              //-----------------------------------------------------------------// 
              void Ext2_ISR() interrupt 9 
              {
                      INT2_INT_FLAG_CLR;//清除INT2中断标志    
                      
              }
              #endif
 187          
 188          //-----------------------------------------------------------------//
 189          //函数名称： void ExtInt3_Init(uchar TriggerMode,ulong Int3_X_Sel)
 190          //函数功能： 外部中断3初始化
 191          //输入参数： 
 192          //外部中断1触发方式选择，uchar TriggerMode
 193          //                       TriggerMode = 0，触发方式为下降沿触发
 194          //                       TriggerMode = 1，触发方式为上升沿触发
 195          //输出参数： 无
 196          //返 回 值： 无
 197          //注：开启多个INT3_X中断时，同一时刻只能响应一个中断，需要释放后才响应下一个INT3_X
 198          //-----------------------------------------------------------------// 
 199          #if ExtInt3_EN
              #pragma message "编译，void ExtInt3_Init(uchar TriggerMode,ulong Int3_X_Sel)函数"
              void ExtInt3_Init(uchar TriggerMode,ulong Int3_X_Sel)
              {
                      EA = 0;//关总中断；
                      REG_ADDR=0x25;
                      REG_DATA = (uchar)(Int3_X_Sel>>16);
                      TRISD |= ((uchar)(Int3_X_Sel>>15))&(0x3E);
                      TRISA |= ((uchar)(Int3_X_Sel>>21))&(0x03);
              
                      REG_ADDR=0x26;
                      REG_DATA  = (uchar)(Int3_X_Sel>>8);
                      TRISC |= (uchar)(Int3_X_Sel>>8);
                      
                      REG_ADDR=0x27;
                      REG_DATA = (uchar)(Int3_X_Sel);
                      TRISB |= (uchar)(Int3_X_Sel);
                      INT3_INT_FLAG_CLR;//清除INT2中断标志
                      INT3_IP_SET;//设置INT2中断优级为高，根据实际应运设置优先级
                      switch(TriggerMode)
                      {
                              case 0:                                                                 
                                      EXT_INT_CON &= ~0X40;   //设置为下降沿触发                      
                              break;
              
                              case 1:                                         
                                      EXT_INT_CON |= 0X40;    //设置为上升沿触发
                              break;
                                                                       
                              default:
                                      EXT_INT_CON &= ~0X40;   //设置为下降沿触发 
                              break;  
                      }
                      INT3_IE_SET;//使能外部INT3中断 
                      EA = 1;//开总中断       
              }
              //-----------------------------------------------------------------//
              //函数名称： void Ext3_ISR() interrupt 18
              //函数功能： 外部中断3中断子函数，同一时刻只能响应一个外部中断输入信号，INT3_X开启多个引脚检测时，电平状态
             -需要释放才后才能响应。
              //输入参数： 无
C51 COMPILER V9.60.0.0   XS16TK06X_INT                                                     05/09/2023 16:49:06 PAGE 5   

              //输出参数： 无
              //返 回 值： 无
              //-----------------------------------------------------------------// 
              void Ext3_ISR() interrupt 18 
              {
                      INT3_INT_FLAG_CLR;//清除INT2中断标志
                      
                      if((DATAB&0x01))//PB0上升沿后，读IO电平状态
                      {
                                              
                      }
                      else//下降沿后，读IO电平状态
                      {
                                      
                      }
                      if((DATAB&0x02))//PB1上升后，读IO电平状态
                      {
                                      
                      }
                      else//下降沿后，读IO电平状态
                      {
                                              
                      }
              
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
